shreyians coding school
https://www.youtube.com/watch?v=qJGR9lLcRc0&t=113s

let obj = {name:'sachin'};
obj.name = 'supriya';
let person = {age:25, name:obj.name, getAge:function(){return this.age}} // shallow copy
let person2 = {age:26, __proto__:person} // deep copy also called as proptotype inheritance
// call

console.log(person.getAge.call(person2));


console.log(!'abc') // false
console.log(+true)  // true
-----------
let a = {size:"small"}
let d;
d = a;
a.size="Big";
console.log(d, a); //o/p- { size: 'Big' } { size: 'Big' }
------------
let a = 3; // type number
let b = new Number(3); // type object
console.log(a == b); // true
console.log(a === b); // false
typeof typeof 1   // typeof 1 => 'number' => typeof 'number' => ans=> 'string'
console.log(!true - true) => (0 - 1) => -1
console.log(true + +"10") => 11
------------
console.log('10*10+5'); // 10*10+5
----------
function foo(){
	'use strict'
	age=20;
	console.log(20)
}
foo()
o/p- error- age is not defined - in strict mode varibale should have var, let , const
------------
<div onlclick="console.log('div')">
  <p onlclick="console.log('p')">
    Click Here!
  </p>
<div>
o/p - p div
// When we click on p tag, immediately call div due to event bubbling
------------
let num = 10;
var num = 20;
console.log(num) 
op - // SyntaxError: Identifier 'num' has already been declared
if we do var num = 10 (1st line) => num = 20
-------------
const obj = {a:"1",a:"2"} // same key
console.log(obj) // o/p=> { a: '2' }
-------------
let person = {
  name: 'sachin',
}

function sayHi(age) {
  return `Name is ${this.name}, Agi is ${age}`;
}
console.log(sayHi.call(person,21)); // Name is sachin, Agi is 21
console.log(sayHi.bind(person,21)); // function sayHi(age){return `Name is ${this.name}, Agi is ${age}`;
console.log(sayHi.bind(person,21)()); // Name is sachin, Agi is 21
-------------
function sayHi() {
	return () => 0;
}
console.log(typeof sayHi()) // function
console.log(typeof sayHi()()) // number
---------------
(()=>{let x = y = 10})() // "var" y =10 accidentaly gets created
(()=>{let x = y = 20})() // y becomes 20
console.log(y) // 20
-------------
//Bind functionality
const sachin = { name: "Sachin", 
				 sayName: function(){ console.log(this.name) }
				}
const nikita = {name: "Nikit"}
setTimeout(sachin.sayName, 3000) // undefined - after 3 sec the context of this changes
setTimeout(sachin.sayName.bind(nikita), 3000) // w.r.t above line binding nikita object
-------------
// Check if the val is integer or not
let a = 12;
const checkInteger = (val) => a % 1 === 0
-------------
DEEP COPY AND SHALLOW COPY
[https://youtu.be/mk7RpyHMUrU?si=1mSkhWwA4hJVazeP]
let obj = {
  name: 'sachin',
  address: {
    city: "Nagpur",
    state: "maharashtra"
  }
}

//let user = Object.assign({}, obj); // shallow copy
let user = {...obj}  // shallow copy
 
user.address.city = "Pune";
console.log("this is obj: ", obj);
console.log("this is user: ", user);

/*
object.assign,{...obj} => these are copying by reference i.e. memory location.
There is no way to do deep copy of object.
If there are nested object, it affects the source object i.e. its shallow copy.
	it fails to maintain saperete copy of user and object.
	
To bring deep copy i.e. nested object should not affect, we can use loadash externaly
via cdn or npm package
syntax: let user = let user = _.cloneDeep(obj);
*/
--------------
DEBOUNCING -
To reduce amount of time function calling. 
Optimize function calling on change Event
Hold function call for some-time.
<input type="text" onChange={myDebounce(doSomething,1000)} placeholder="Enter text here"/>
<script type="text/javascript">
  let counter = 0;
  const doSomething = (e) => {
    console.log("Fetchin data : ", counter++, e.target.value)
  }

  function myDebounce (fun, t=1000) {
    let timer;
    return (...event) => {
      clearTimeout(timer)
      timer = setTimeout(()=>{fun(...event)}, t)
    }
  }
</script>
---------
THROTTLING - 
Use case - On submiting the form, if user hit submit multiple times.
then it should call only once
<button className="bg-red-500 p-3" type="button" onclick="myThrottle(doSubmit)" id="btnSubmit" >Click Me</button>
<script type="text/javascript">
const doSubmit = () => {
    document.getElementById("btnSubmit").disabled = false;
    console.log("Throttle done");
}

const myThrottle = (fun, d=3000) => {
    document.getElementById("btnSubmit").disabled = true;
    setTimeout(()=> fun() ,d)
}
</script>
----------
WEB VITALS 
These are performance measuring standard.
In react the package "web-vitals" is being used
CLS - Cumulative layout shift - Visual stability - switching time between landscape to portrate
FID - First Input Delay - interactivity - input delay of 100ms or Less
FCP - First Contentful Paint -
LCP - Largets Contentful Paint - Loading performance - 2.5 seconds or less within first load
TTFB -
-----------------
CURRYING in Javascript

const getSum = (a) => {
  return (b) => {
    return (c) => {
      return (d) => {
        return (e) => {
          // this function forms closure,can grasp all outer arguments
          return a + b + c + d + e;
        }
      }
    }
  }
}
const sum = getSum (1)(2)(3)(4)(5)
console.log(sum);
----
-----------
AASISH JWALAPURAM
let x = 1; 
if (function f() {}) { 
    x += typeof f; 
} 

console. log(x);
------------
let obj1 = { key: "value" };
let obj2 = obj1;
let obj3 = obj2;

obj1.key = "new value";

obj2 = { key: "another value" };
 
console.log(obj1.key, obj2.key, obj3.key);
// new value    another value    new value
---------------
